
gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply from: 'translations.gradle'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'idea'
apply plugin: 'kotlin-parcelize'
apply plugin: 'org.jetbrains.kotlin.android'
apply from: 'static-ips.gradle'

repositories {
    maven {
        url "https://raw.github.com/signalapp/maven/master/circular-progress-button/releases/"
        content {
            includeGroupByRegex "com\\.github\\.dmytrodanylyk\\.circular-progress-button\\.*"
        }
    }
    maven {
        url "https://raw.github.com/signalapp/maven/master/sqlcipher/release/"
        content {
            includeGroupByRegex "org\\.signal.*"
        }
    }
    maven {
        url "https://www.jitpack.io"
    }
    maven { url = uri("https://maven.scijava.org/content/repositories/public/") }//these two for defunct old jcentre packages
    maven { url 'https://repo.gradle.org/gradle/libs-releases/' }

    google()
    mavenCentral()
    mavenLocal()
    maven {
        url "https://dl.cloudsmith.io/qxAgwaeEE1vN8aLU/mobilecoin/mobilecoin/maven/"
    }
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.fragment.ktx
    lintChecks project(':lintchecks')

    coreLibraryDesugaring libs.android.tools.desugar

    implementation (libs.androidx.appcompat) {
        version {
            strictly '1.2.0'
        }
    }

    implementation libs.androidx.window
    implementation libs.androidx.recyclerview
    implementation libs.material.material
    implementation libs.androidx.legacy.support
    implementation libs.androidx.cardview
    implementation libs.androidx.preference
    implementation libs.androidx.legacy.preference
    implementation libs.androidx.gridlayout
    implementation libs.androidx.exifinterface
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.multidex
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.reactivestreams.ktx
    implementation libs.androidx.camera.core
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    implementation libs.androidx.camera.view
    implementation libs.androidx.concurrent.futures
    implementation libs.androidx.autofill
    implementation libs.androidx.biometric
    implementation libs.androidx.sharetarget

    implementation (libs.firebase.messaging) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    implementation libs.google.play.services.maps
    implementation libs.google.play.services.auth

    implementation libs.bundles.exoplayer

    implementation libs.conscrypt.android
    implementation libs.signal.aesgcmprovider

//    implementation project(':libsignal-service')
    implementation project(':paging')
    implementation project(':core-util')
    implementation project(':glide-config')
    implementation project(':video')
    implementation project(':device-transfer')
    implementation project(':image-editor')
    implementation project(':donations')
    implementation project(':contacts')

    implementation 'androidx.work:work-runtime:2.7.1'

//    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
//    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.android.gms:play-services-wallet:18.1.3'

//    implementation libs.signal.zkgroup.android
    implementation libs.libsignal.android
    implementation libs.google.protobuf.javalite

    implementation(libs.mobilecoin) {
        exclude group: 'com.google.protobuf'
    }

    implementation(libs.signal.argon2) {
        artifact {
            type = "aar"
        }
    }

    implementation libs.signal.ringrtc

    implementation libs.leolin.shortcutbadger
    implementation libs.emilsjolander.stickylistheaders
    implementation libs.jpardogo.materialtabstrip
    implementation libs.apache.httpclient.android
    implementation libs.photoview
    implementation libs.glide.glide
    implementation libs.roundedimageview
    implementation libs.materialish.progress
    implementation libs.greenrobot.eventbus
    implementation libs.waitingdots
    implementation libs.floatingactionbutton
    implementation libs.google.zxing.android.integration
    implementation libs.time.duration.picker
    implementation libs.google.zxing.core
    implementation (libs.subsampling.scale.image.view) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    /*implementation (libs.numberpickerview) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }*/
    implementation (libs.android.tooltips) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation (libs.android.smsmms) {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation libs.stream
    implementation (libs.colorpicker) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    //AA from libsignal-service
    api libs.google.libphonenumber
    api libs.jackson.core

    implementation libs.libsignal.client
    api libs.square.okhttp3
    api libs.square.okio
    implementation libs.threeten.threetenbp
    implementation 'org.whispersystems:curve25519-android:0.5.0'
    //


    implementation project(path: ':smart-location')
    implementation project(path: ':debug-db-base')
    implementation project(path: ':debug-database-encrypt')

    implementation libs.lottie

    implementation libs.stickyheadergrid
    implementation libs.circular.progress.button

    implementation libs.signal.android.database.sqlcipher //AA update project debug-database-encrypt accordingly
    implementation libs.androidx.sqlite

    implementation (libs.google.ez.vcard) {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.freemarker'
    }
    implementation libs.dnsjava

    //AA+
    implementation libs.google.integrity.api
    implementation libs.google.maps.utils
//    implementation libs.expandablelayout
    implementation 'cc.cloudist.acplibrary:library:1.2.1'
    implementation 'com.mahc.custombottomsheetbehavior:googlemaps-like:0.9.2'
    implementation libs.facebook.stetho
    implementation 'com.flaviofaria:kenburnsview:1.0.7'
    implementation 'com.ogaclejapan.smarttablayout:library:2.0.0@aar'//see https://github.com/hea0ven/SmartTabLayout/commit/1a6dc899d2c49f6e6514df60a266c76f02909917 for data set observer and https://github.com/Ultrahuman-tech/SmartTabLayout/commit/883faac871abda7ebf6db30a518830936b4d36ec
    implementation 'com.ogaclejapan.smarttablayout:utils-v4:2.0.0@aar'
    implementation 'com.mikepenz:actionitembadge:3.3.1@aar'
    implementation 'com.mikepenz:iconics-core:2.8.1@aar'
    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'
    implementation 'com.mikepenz:community-material-typeface:2.0.46.1@aar'
    implementation 'com.bartoszlipinski:viewpropertyobjectanimator:1.4.5'
    implementation libs.kongzue.dialogx

    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'


    implementation 'com.kyleduo.switchbutton:library:2.1.0'
//    implementation libs.expandablelayout //migrated in-code
    implementation 'com.google.guava:guava:20.0'
    implementation 'com.shawnlin:number-picker:2.4.12'

    implementation 'com.github.rvesse:airline:2.7.0' //https://github.com/rvesse/airline

    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    implementation files('src/main/libs/compress-lzf-1.0.4.jar')

//    flipperImplementation libs.facebook.flipper
//    flipperImplementation libs.facebook.soloader
//    flipperImplementation libs.square.leakcanary

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.mockito.kotlin

    testImplementation testLibs.androidx.test.core
    testImplementation (testLibs.robolectric.robolectric) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation testLibs.robolectric.shadows.multidex
    testImplementation (testLibs.bouncycastle.bcprov.jdk15on) {
//        force = true
    }
    testImplementation testLibs.hamcrest.hamcrest

//    testImplementation(testFixtures(project(":libsignal-service")))

    androidTestImplementation testLibs.androidx.test.ext.junit
    androidTestImplementation testLibs.espresso.core

    testImplementation testLibs.espresso.core

    implementation libs.kotlin.stdlib.jdk8
    implementation libs.kotlin.reflect
    implementation libs.jackson.module.kotlin

    implementation libs.rxjava3.rxandroid
    implementation libs.rxjava3.rxkotlin
    implementation libs.rxdogtag

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
}

ktlint {
    // Use a newer version to resolve https://github.com/JLLeitschuh/ktlint-gradle/issues/507
    version = "0.43.2"
}

def canonicalVersionCode = 82
def canonicalVersionName = "1.20"

def postFixSize = 100
def abiPostFix = ['armeabi-v7a' : 1,
                  'arm64-v8a'   : 2,
//                  'x86'         : 3,
//                  'x86_64'      : 4,
                  'universal'   : 5]

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}

def selectableVariants = [
        'nightlyProdFlipper',
        'nightlyProdPerf',
        'nightlyProdRelease',
        'nightlyStagingPerf',
        'playProdDebug',
        'playProdFlipper',
        'playProdPerf',
        'playProdRelease',
        'playStagingDebug',
        'playStagingFlipper',
        'playStagingPerf',
        'playStagingRelease',
        'websiteProdFlipper',
        'websiteProdRelease',
]

android {
    buildFeatures {
        buildConfig = true
    }
    namespace 'com.unfacd.android'
    buildToolsVersion BUILD_TOOL_VERSION
    compileSdk COMPILE_SDK
    useLibrary 'org.apache.http.legacy'

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    flavorDimensions "none"

    signingConfigs {
        staging {
            storeFile file("${project.rootDir}/dev.keystore")
            storePassword 'android'
            keyAlias 'staging'
            keyPassword 'android'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        baseline file("lint-baseline.xml")
        disable "LintError"
    }

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JAVA_VERSION
        targetCompatibility JAVA_VERSION
    }

    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'LICENSE', 'NOTICE', 'asm-license.txt', 'META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/proguard/androidx-annotations.pro']
        }
    }


    defaultConfig {
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        minSdkVersion MINIMUM_SDK
        targetSdkVersion TARGET_SDK
        multiDexEnabled true

        resConfigs "en", "ar", "hu"

        vectorDrawables.useSupportLibrary = true

        project.ext.set("archivesBaseName", "unfacd")

        applicationId "com.unfacd.android"

        //related to com.kongzue.dialog_v3
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "String", "SIGNAL_URL", "\"https://ufsrv.unfacd.io\""
        buildConfigField "String", "SIGNAL_CONTACT_DISCOVERY_URL", "\"https://api.unfacd.io\""
        buildConfigField "String", "SIGNAL_CDN_URL", "\"https://cdn.signal.org\""
        buildConfigField "String", "SIGNAL_CDSH_URL", "\"https://cdsh.staging.signal.org\""
        buildConfigField "String", "SIGNAL_KEY_BACKUP_URL", "\"https://api-staging.unfacd.io\""
        buildConfigField "String", "SIGNAL_SERVICE_STATUS_URL", "\"uptime.unfacd.io\""
        buildConfigField "String", "SIGNAL_KEY_BACKUP_URL", "\"https://api.unfacd.io\""
        buildConfigField "String", "SIGNAL_SFU_URL", "\"https://sfu.unfacd.io\""
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_NAMES", "new String[]{\"Test\", \"Staging\"}"
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_URLS", "new String[]{\"https://sfu.test.voip.unfacd.io\", \"https://sfu.staging.voip.unfacd.io\"}"
        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "String", "STORAGE_URL", "\"https://api.unfcad.io\""
        buildConfigField "String", "GIPHY_PROXY_HOST", "\"api.giphy.com\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String[]", "SIGNAL_SERVICE_IPS", service_ips
        buildConfigField "String[]", "SIGNAL_STORAGE_IPS", storage_ips
        buildConfigField "String[]", "SIGNAL_CDN_IPS", cdn_ips
        buildConfigField "String[]", "SIGNAL_CDN2_IPS", cdn2_ips
        buildConfigField "String[]", "SIGNAL_CDS_IPS", cds_ips
        buildConfigField "String[]", "SIGNAL_KBS_IPS", kbs_ips
        buildConfigField "String[]", "SIGNAL_SFU_IPS", sfu_ips
        buildConfigField "String[]", "SIGNAL_CONTENT_PROXY_IPS", content_proxy_ips
        buildConfigField "String", "USER_AGENT", "\"unfacd-android\""
        buildConfigField "String", "SIGNAL_CDN2_URL", "\"https://cdn2.signal.org\""
        buildConfigField "String", "CDSH_PUBLIC_KEY", "\"2fe57da347cd62431528daac5fbb290730fff684afc4cfc2ed90995f58cb3b74\""
        buildConfigField "String", "CDSH_CODE_HASH", "\"ec58c0d7561de8d5657f3a4b22a635eaa305204e9359dcc80a99dfd0c5f1cbf2\""

        buildConfigField "boolean", "DEV_BUILD", "false"
        buildConfigField "String", "CDS_MRENCLAVE", "\"cd6cfc342937b23b1bdd3bbf9721aa5615ac9ff50a75c5527d441cd3276826c9\""
        buildConfigField "KbsEnclave", "KBS_ENCLAVE", "new KbsEnclave(\"0cedba03535b41b67729ce9924185f831d7767928a1d1689acb689bc079c375f\", " +
                "\"187d2739d22be65e74b65f0055e74d31310e4267e5fac2b1246cc8beba81af39\", " +
                "\"ee19f1965b1eefa3dc4204eb70c04f397755f771b8c1909d080c04dad2a6a9ba\")"
        buildConfigField "KbsEnclave[]", "KBS_FALLBACKS", "new KbsEnclave[] {" +
                "new KbsEnclave(\"fe7c1bfae98f9b073d220366ea31163ee82f6d04bead774f71ca8e5c40847bfe\", " +
                "\"fe7c1bfae98f9b073d220366ea31163ee82f6d04bead774f71ca8e5c40847bfe\", " +
                "\"a3baab19ef6ce6f34ab9ebb25ba722725ae44a8872dc0ff08ad6d83a9489de87\")" +
                "}"
        buildConfigField "String", "UNIDENTIFIED_SENDER_TRUST_ROOT",   "\"BS9bPCdp+kPOyIarlVY9+kJLopys2Xz9uu8eo+YYlLwn\""
        buildConfigField "String", "ZKGROUP_SERVER_PUBLIC_PARAMS", "\"AOB97VKbbx+NjNSvcoLsTHRxxxt3kFEtcmg19+8L/VAoYH1+Z3sEB4f5LPAaoX3flg9DHGgaiozI8lO5fuHH/E5WFfww2kQtzEi+LXKvBv8O12dlfq9Jer8ztf39aACBe/K+nnE36ORB4Ytvh1M2f4yVDtMr3S9xl8XDmq8FBFpr+mdDHJW/odfvgcoJLpL78aP0f9aSrCU8/OkMbjeQYz2OJzgTM9jaXulhmaJIv8kwaB1r9vlSz3HkETNoJkROZ6zLsXls022C++FZKsipmOvHB2HHqVSfdLo0/EAbTi85nki667ejP/Nu6nsyu92Q3jin74Fc0BT6YzebM8XoYUaarsCd0af2jYPyi57uHmgpnB6NZTgnLFVBUnGN2J73DQ==\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        buildConfigField "String", "DEFAULT_CURRENCIES", "\"EUR,AUD,GBP,CAD,CNY\""
        buildConfigField "String", "GIPHY_API_KEY", "\"\""
        buildConfigField "String", "SIGNAL_CAPTCHA_URL", "\"https://signalcaptchas.org/registration/generate.html\""
        buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://api.unfacd.io/challenge/generate.html\""

        buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_VARIANT_TYPE", "\"unset\""
        buildConfigField "String", "BADGE_STATIC_ROOT", "\"https://updates2.signal.org/static/badges/\""
        buildConfigField "String", "STRIPE_PUBLISHABLE_KEY", "\"\""

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        resourceConfigurations += []

        splits {
            abi {
                enable true
                reset()
                include 'armeabi-v7a', 'arm64-v8a'//, 'x86', 'x86_64'
                universalApk true
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('C:\\Users\\ayman Documents\\unfacd\\android\\unfacd-android\\keystores\\UnfacdDev.jks')
            storePassword 'Chang#m32405'
            keyPassword 'Chang#m32405'
            keyAlias 'UnfacdDevKey'
        }
        release
    }

    buildTypes {
        debug {
            isDefault true
            debuggable true
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [crashlyticsCollectionEnabled:"false"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard/proguard-firebase-messaging.pro',
                    'proguard/proguard-google-play-services.pro',
                    'proguard/proguard-dagger.pro',
                    'proguard/proguard-jackson.pro',
                    'proguard/proguard-sqlite.pro',
                    'proguard/proguard-appcompat-v7.pro',
                    'proguard/proguard-square-okhttp.pro',
                    'proguard/proguard-square-okio.pro',
                    'proguard/proguard-rounded-image-view.pro',
                    'proguard/proguard-glide.pro',
                    'proguard/proguard-shortcutbadger.pro',
                    'proguard/proguard-retrofit.pro',
                    'proguard/proguard-webrtc.pro',
                    'proguard/proguard-klinker.pro',
                    'proguard/proguard-retrolambda.pro',
                    'proguard/proguard-smartlocation.pro',//AA+
                    'proguard/proguard-okhttp.pro',
                    'proguard/proguard-ez-vcard.pro',
                    'proguard/proguard-workmanager.pro',
                    'proguard/proguard-google-common.pro',//AA+
                    'proguard/proguard-lzf.pro',//AA+
                    'proguard/proguard-cli.pro',//AA+
                    'proguard/proguard.cfg'
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Debug\""
            testProguardFiles 'proguard/proguard-automation.pro', 'proguard/proguard.cfg'
            signingConfig signingConfigs.release//signingConfigs.dev
            applicationIdSuffix ".debug" //AA+
            buildConfigField "boolean", "DEV_BUILD", "true"
            buildConfigField "String", "UFSRV_URL", "\"wss://ufsrv.unfacd.io\""
            buildConfigField "String", "UFSRVAPI_URL", "\"https://api.unfacd.io\""
            buildConfigField "String", "UFSRVMEDIA_URL", "\"https://media.unfacd.io\""
            buildConfigField "String", "PATCH_ID", "\"UF New semantics for processing linkjoining\""
            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"mainnet\""
            manifestPlaceholders.appName = "unfacd"
            crunchPngs false
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false

//            flipper {
//                 initWith debug
//            isDefault false
//            minifyEnabled false
//            matchingFallbacks = ['debug']
//            }
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            crunchPngs true
            manifestPlaceholders = [crashlyticsCollectionEnabled:"true"]
            buildConfigField "boolean", "RELEASE_BUILD", "true"
            buildConfigField "boolean", "DEV_BUILD", "false" //remove for prod
            proguardFiles = buildTypes.debug.proguardFiles
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Release\""
            signingConfig signingConfigs.release
            buildConfigField "String", "UFSRV_URL", "\"wss://ufsrv.unfacd.io\""
            buildConfigField "String", "UFSRVAPI_URL", "\"https://api.unfacd.io\""
            buildConfigField "String", "UFSRVMEDIA_URL", "\"https://media.unfacd.io\""
            buildConfigField "String", "UFSRVSFU_URL", "\"https://sfu.unfacd.io\""
            buildConfigField "String", "PATCH_ID", "\"UF New semantics for processing linkjoining\""
            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"mainnet\""
            manifestPlaceholders.appName = "unfacd"
        }

        perf {
            initWith debug
            isDefault false
            debuggable false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Perf\""
        }
    }

    productFlavors {
        play {
            dimension "none"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            manifestPlaceholders.appNameSuffix = ""
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"play\""
        }

        nightly {
            dimension 'distribution'
            versionNameSuffix "-nightly-untagged-${getDateSuffix()}"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"nightly\""
        }

        prod {
            // If you've configured the defaultConfig block for the release version of
            // your app, you can leave this block empty and Gradle uses configurations in
            // the defaultConfig block instead. You still need to create this flavor.
            // Otherwise, all variants use the "dev" flavor configurations.
            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"mainnet\""
            buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"Prod\""
        }

        staging {
            dimension 'none'
            signingConfig signingConfigs.staging
            applicationIdSuffix ".staging"
            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"testnet\""
            buildConfigField "String", "SIGNAL_CAPTCHA_URL", "\"https://signalcaptchas.org/staging/registration/generate.html\""
            buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"Staging\""
        }
//        website {
//            dimension "none"
//            ext.websiteUpdateUrl = "https://updates.unfacd.io/android"
//            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
//            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
//            manifestPlaceholders.appNameSuffix = "-w"
//            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"website\""
//        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.baseName.contains('nightly')) {
                output.versionCodeOverride = canonicalVersionCode * postFixSize + 5
                def tag = getCurrentGitTag()
                if (tag != null && tag.length() > 0) {
                    if (tag.startsWith("v")) {
                        tag = tag.substring(1)
                    }
                    output.versionNameOverride = tag
                }
            } else {
                output.outputFileName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")
                def abiName = output.getFilter("ABI") ?: 'universal'
                def postFix = abiPostFix.get(abiName, 0)

                if (postFix >= postFixSize) throw new AssertionError("postFix is too large")

                output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
            }
        }
    }

    android.variantFilter { variant ->
        def distribution = variant.getFlavors().get(0).name
//        def environment  = variant.getFlavors().get(1).name
        def buildType    = variant.buildType.name
//        def fullName     = distribution + environment.capitalize() + buildType.capitalize()

        if (distribution == 'study' && buildType != 'perf' && buildType != 'mock') {
            variant.setIgnore(true)
        } else if (distribution != 'study' && buildType == 'mock') {
            variant.setIgnore(true)
        } else if (distribution == 'internal' && buildType != 'flipper' && buildType != 'perf' && buildType != 'release') {
            variant.setIgnore(true)
        } else if (distribution == 'nightly' && environment != 'prod') {
            variant.setIgnore(true)
        } else if (distribution == 'nightly' && buildType != 'flipper' && buildType != 'perf' && buildType != 'release') {
            variant.setIgnore(true)
        }
    }
}

protobuf {
//    generatedFilesBaseDir = "app/build/generated/source/proto/internalDebug"
    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

def getDateSuffix() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm')
    return formattedDate
}

def getLastCommitTimestamp() {
    if (!(new File('.git').exists())) {
        return System.currentTimeMillis().toString()
    }
    def folder = new File( '.git' )
    def gitTest = exec {
        def command = "C:\\Program Files\\Git\\bin\\git.exe --version"
        ignoreExitValue = true
        executable "bash" args "-l", "-c", command
    }
    if (gitTest.getExitValue()==0 && folder.exists()) {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'C:\\Program Files\\Git\\bin\\git.exe'
                args = ['log', '-1', '--pretty=format:%ct']
                standardOutput = os
            }

            return os.toString() + "000"
        }
    } else {
        Date today = new Date()
        return today.getTime().toString()
    }
}

//AA+ to disable Test builds
tasks.configureEach { task ->
//    if (task.name.equals("lint")) {
//        //this is for speed up build
//        task.enabled = false
//    }
    if (task.name.contains("Test")) {
        //this is what you need
        task.enabled = false
    }
}

/*task qa {
    group 'Verification'
    description 'Quality Assurance. Run before pushing.'
//    dependsOn ':testPlayReleaseUnitTest', ':assemblePlayDebug'
    dependsOn 'testPlayReleaseUnitTest', 'lintPlayRelease', 'assemblePlayDebug'
}*/

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

def getGitHash() {
    if (!(new File('.git').exists())) {
        return "abcd1234"
    }
    def stdout = new ByteArrayOutputStream()
    exec {
        executable = 'C:\\Program Files\\Git\\bin\\git.exe'
        args = ['rev-parse', '--short', 'HEAD']
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getCurrentGitTag() {
    if (!(new File('.git').exists())) {
        return ''
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--points-at', 'HEAD'
        standardOutput = stdout
    }

    def output = stdout.toString().trim()

    if (output != null && output.size() > 0) {
        def tags = output.split('\n').toList()
        return tags.stream().filter(t -> t.contains('nightly')).findFirst().orElse(tags.get(0))
    } else {
        return null
    }
}

tasks.withType(Test) {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

//https://medium.com/@samstern_58566/how-to-use-firebase-on-android-without-the-google-services-plugin-93ecc7dc6c4.
//https://github.com/signalapp/Signal-Android/commit/a6564f8f8458fa256e4b68fef65210ee0c30d518 removed the plugin
apply plugin: 'com.google.gms.google-services'